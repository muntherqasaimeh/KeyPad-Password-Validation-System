Code :
int counter=0;
char test[3];
char mypass[]= {'1','1','1'};
const int numRows = 4; // number of rows in the keypad
const int numCols = 4; // number of columns
const int debounceTime = 20; // number of milliseconds for switch to be stable
const char keymap[numRows][numCols] = {
 { '1', '2', '3' ,'A'} ,
 { '4', '5', '6' ,'B'} ,
 { '7', '8', '9' ,'C'} ,
 { '*', '0', '#' ,'D'}
};
const int rowPins[numRows] = { 12, 11, 10, 9 }; // Rows 0 through 3
const int colPins[numCols] = { 7, 6, 5,4 }; // Columns 0 through 2
void setup()
{
 pinMode(1, OUTPUT);
 Serial.begin(9600);
 for (int row = 0; row < numRows; row++)
 {
 pinMode(rowPins[row],INPUT); // Set row pins as input
 digitalWrite(rowPins[row],HIGH); // turn on Pull-ups
 }
 for (int column = 0; column < numCols; column++)
 {
 pinMode(colPins[column],OUTPUT); // Set column pins as outputs 
 // for writing
 digitalWrite(colPins[column],HIGH); // Make all columns inactive
 }
}
void loop()
{
  collectkeys();
  delay(5000);

}
// returns with the key pressed, or 0 if no key is pressed
char getKey()
{
 char key = 0; // 0 indicates no key pressed
 for(int column = 0; column < numCols; column++)
 {
 digitalWrite(colPins[column],LOW); // Activate the current column.
 for(int row = 0; row < numRows; row++) // Scan all rows for 
 // a key press.
 {
 if(digitalRead(rowPins[row]) == LOW) // Is a key pressed?
 {
 delay(debounceTime); // debounce
 while(digitalRead(rowPins[row]) == LOW)
 ; 					// wait for key to be released
   key = keymap[row][column]; // Remember which key 
 				// was pressed.
 }
 }
 digitalWrite(colPins[column],HIGH); // De-activate the current column.
 }
 return key; // returns the key pressed or 0 if none
}



void collectkeys()
{
  for(int i=0;i<=2;i++)
  {
  char key = getKey();
 if( key != 0)
     {
 Serial.print("Got key "+i);
 Serial.println(key);
   test[i]=key;
   
      }
   
  }
   Serial.print("stop pressing");
  
    if(test[0]=='1'&&test[1]=='1'&&test[2]=='1')
    {
      digitalWrite(1,HIGH);
    }
  else
  {
    digitalWrite(1,LOW);
  }
  
    
}
